// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package schema

import (
	"context"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts(
	contact_group_id,
	first_name,
	last_name,
	business_name,
	job_title,
	location_group_id,
	image,
	description
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING  contact_id
`

type CreateContactParams struct {
	ContactGroupID  int     `json:"contact_group_id"`
	FirstName       string  `json:"first_name"`
	LastName        string  `json:"last_name"`
	BusinessName    string  `json:"business_name"`
	JobTitle        string  `json:"job_title"`
	LocationGroupID *string `json:"location_group_id"`
	Image           *string `json:"image"`
	Description     *string `json:"description"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.ContactGroupID,
		arg.FirstName,
		arg.LastName,
		arg.BusinessName,
		arg.JobTitle,
		arg.LocationGroupID,
		arg.Image,
		arg.Description,
	)
	var contact_id string
	err := row.Scan(&contact_id)
	return contact_id, err
}

const createContactAddress = `-- name: CreateContactAddress :one
INSERT INTO contacts_address(
	contact_id,
	address_type,
	address,
	zip,
	city ,
	country,
	mobile ,
	telephone,
	email,
	website
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) RETURNING  contacts_address_id
`

type CreateContactAddressParams struct {
	ContactID   string          `json:"contact_id"`
	AddressType AddressTypeEnum `json:"address_type"`
	Address     *string         `json:"address"`
	Zip         *string         `json:"zip"`
	City        *string         `json:"city"`
	Country     *string         `json:"country"`
	Mobile      *string         `json:"mobile"`
	Telephone   *string         `json:"telephone"`
	Email       *string         `json:"email"`
	Website     *string         `json:"website"`
}

func (q *Queries) CreateContactAddress(ctx context.Context, arg CreateContactAddressParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createContactAddress,
		arg.ContactID,
		arg.AddressType,
		arg.Address,
		arg.Zip,
		arg.City,
		arg.Country,
		arg.Mobile,
		arg.Telephone,
		arg.Email,
		arg.Website,
	)
	var contacts_address_id string
	err := row.Scan(&contacts_address_id)
	return contacts_address_id, err
}

const createContactTypeSubGroup = `-- name: CreateContactTypeSubGroup :one
INSERT INTO contact_group(
	contact_group_name,
	contact_type_id
) VALUES ($1,$2) RETURNING  contact_group_id
`

type CreateContactTypeSubGroupParams struct {
	ContactGroupName string `json:"contact_group_name"`
	ContactTypeID    int    `json:"contact_type_id"`
}

func (q *Queries) CreateContactTypeSubGroup(ctx context.Context, arg CreateContactTypeSubGroupParams) (int, error) {
	row := q.db.QueryRowContext(ctx, createContactTypeSubGroup, arg.ContactGroupName, arg.ContactTypeID)
	var contact_group_id int
	err := row.Scan(&contact_group_id)
	return contact_group_id, err
}

const deleteContactById = `-- name: DeleteContactById :exec
DELETE FROM contacts WHERE contact_id = $1
`

func (q *Queries) DeleteContactById(ctx context.Context, contactID string) error {
	_, err := q.db.ExecContext(ctx, deleteContactById, contactID)
	return err
}

const getAllContactAddress = `-- name: GetAllContactAddress :many
SELECT contacts_address_id, contact_id, address, zip, city, country, mobile, telephone, email, website, is_active, address_type FROM contacts_address
`

func (q *Queries) GetAllContactAddress(ctx context.Context) ([]ContactsAddress, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContactsAddress{}
	for rows.Next() {
		var i ContactsAddress
		if err := rows.Scan(
			&i.ContactsAddressID,
			&i.ContactID,
			&i.Address,
			&i.Zip,
			&i.City,
			&i.Country,
			&i.Mobile,
			&i.Telephone,
			&i.Email,
			&i.Website,
			&i.IsActive,
			&i.AddressType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactType = `-- name: GetAllContactType :many
SELECT contact_type_id, contact_type_name, is_active, is_location_group FROM contact_type order by contact_type_name asc
`

type GetAllContactTypeRow struct {
	ContactTypeID   int    `json:"contact_type_id"`
	ContactTypeName string `json:"contact_type_name"`
	IsActive        bool   `json:"is_active"`
	IsLocationGroup bool   `json:"is_location_group"`
}

func (q *Queries) GetAllContactType(ctx context.Context) ([]GetAllContactTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllContactTypeRow{}
	for rows.Next() {
		var i GetAllContactTypeRow
		if err := rows.Scan(
			&i.ContactTypeID,
			&i.ContactTypeName,
			&i.IsActive,
			&i.IsLocationGroup,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactTypeSubGroup = `-- name: GetAllContactTypeSubGroup :many
SELECT contact_group_name, is_active, contact_group_id, contact_type_id FROM contact_group
`

func (q *Queries) GetAllContactTypeSubGroup(ctx context.Context) ([]ContactGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactTypeSubGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContactGroup{}
	for rows.Next() {
		var i ContactGroup
		if err := rows.Scan(
			&i.ContactGroupName,
			&i.IsActive,
			&i.ContactGroupID,
			&i.ContactTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContacts = `-- name: GetAllContacts :many
SELECT contacts.contact_id, contacts.first_name, contacts.last_name, contacts.business_name, contacts.job_title, contacts.location_group_id, contacts.image, contacts.description, contacts.contact_group_id,address,zip,city,country,mobile,email  FROM contacts LEFT JOIN contacts_address ON  contacts.contact_id = contacts_address.contact_id  AND contacts_address.address_type='default' LIMIT $2::int  OFFSET $1::int
`

type GetAllContactsParams struct {
	ResultOffset int `json:"result_offset"`
	ResultLimit  int `json:"result_limit"`
}

type GetAllContactsRow struct {
	ContactID       string  `json:"contact_id"`
	FirstName       string  `json:"first_name"`
	LastName        string  `json:"last_name"`
	BusinessName    string  `json:"business_name"`
	JobTitle        string  `json:"job_title"`
	LocationGroupID *string `json:"location_group_id"`
	Image           *string `json:"image"`
	Description     *string `json:"description"`
	ContactGroupID  int     `json:"contact_group_id"`
	Address         *string `json:"address"`
	Zip             *string `json:"zip"`
	City            *string `json:"city"`
	Country         *string `json:"country"`
	Mobile          *string `json:"mobile"`
	Email           *string `json:"email"`
}

func (q *Queries) GetAllContacts(ctx context.Context, arg GetAllContactsParams) ([]GetAllContactsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllContacts, arg.ResultOffset, arg.ResultLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllContactsRow{}
	for rows.Next() {
		var i GetAllContactsRow
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.BusinessName,
			&i.JobTitle,
			&i.LocationGroupID,
			&i.Image,
			&i.Description,
			&i.ContactGroupID,
			&i.Address,
			&i.Zip,
			&i.City,
			&i.Country,
			&i.Mobile,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactsNew = `-- name: GetAllContactsNew :many
SELECT contacts.contact_id, contacts.first_name, contacts.last_name, contacts.business_name, contacts.job_title, contacts.location_group_id, contacts.image, contacts.description, contacts.contact_group_id,address,zip,city,country,mobile,email  FROM contacts LEFT JOIN contacts_address ON  contacts.contact_id = contacts_address.contact_id  AND contacts_address.address_type='default'
`

type GetAllContactsNewRow struct {
	ContactID       string  `json:"contact_id"`
	FirstName       string  `json:"first_name"`
	LastName        string  `json:"last_name"`
	BusinessName    string  `json:"business_name"`
	JobTitle        string  `json:"job_title"`
	LocationGroupID *string `json:"location_group_id"`
	Image           *string `json:"image"`
	Description     *string `json:"description"`
	ContactGroupID  int     `json:"contact_group_id"`
	Address         *string `json:"address"`
	Zip             *string `json:"zip"`
	City            *string `json:"city"`
	Country         *string `json:"country"`
	Mobile          *string `json:"mobile"`
	Email           *string `json:"email"`
}

func (q *Queries) GetAllContactsNew(ctx context.Context) ([]GetAllContactsNewRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactsNew)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllContactsNewRow{}
	for rows.Next() {
		var i GetAllContactsNewRow
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.BusinessName,
			&i.JobTitle,
			&i.LocationGroupID,
			&i.Image,
			&i.Description,
			&i.ContactGroupID,
			&i.Address,
			&i.Zip,
			&i.City,
			&i.Country,
			&i.Mobile,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactstest = `-- name: GetAllContactstest :many
SELECT contact_id, first_name, last_name, business_name, job_title, location_group_id, image, description, contact_group_id FROM contacts
`

func (q *Queries) GetAllContactstest(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactstest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.BusinessName,
			&i.JobTitle,
			&i.LocationGroupID,
			&i.Image,
			&i.Description,
			&i.ContactGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactAddressByContact = `-- name: GetContactAddressByContact :many
SELECT contacts_address_id, contact_id, address, zip, city, country, mobile, telephone, email, website, is_active, address_type FROM contacts_address WHERE contact_id = $1
`

func (q *Queries) GetContactAddressByContact(ctx context.Context, contactID string) ([]ContactsAddress, error) {
	rows, err := q.db.QueryContext(ctx, getContactAddressByContact, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContactsAddress{}
	for rows.Next() {
		var i ContactsAddress
		if err := rows.Scan(
			&i.ContactsAddressID,
			&i.ContactID,
			&i.Address,
			&i.Zip,
			&i.City,
			&i.Country,
			&i.Mobile,
			&i.Telephone,
			&i.Email,
			&i.Website,
			&i.IsActive,
			&i.AddressType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactAddressById = `-- name: GetContactAddressById :one
SELECT contacts_address_id, contact_id, address, zip, city, country, mobile, telephone, email, website, is_active, address_type FROM contacts_address WHERE contacts_address_id = $1
`

func (q *Queries) GetContactAddressById(ctx context.Context, contactsAddressID string) (ContactsAddress, error) {
	row := q.db.QueryRowContext(ctx, getContactAddressById, contactsAddressID)
	var i ContactsAddress
	err := row.Scan(
		&i.ContactsAddressID,
		&i.ContactID,
		&i.Address,
		&i.Zip,
		&i.City,
		&i.Country,
		&i.Mobile,
		&i.Telephone,
		&i.Email,
		&i.Website,
		&i.IsActive,
		&i.AddressType,
	)
	return i, err
}

const getContactAddressId = `-- name: GetContactAddressId :one
SELECT contacts_address_id FROM contacts_address WHERE contact_id = $1 and address_type = $2 limit 1
`

type GetContactAddressIdParams struct {
	ContactID   string          `json:"contact_id"`
	AddressType AddressTypeEnum `json:"address_type"`
}

func (q *Queries) GetContactAddressId(ctx context.Context, arg GetContactAddressIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getContactAddressId, arg.ContactID, arg.AddressType)
	var contacts_address_id string
	err := row.Scan(&contacts_address_id)
	return contacts_address_id, err
}

const getContactById = `-- name: GetContactById :one
SELECT contact_id, first_name, last_name, business_name, job_title, location_group_id, image, description, contact_group_id FROM contacts WHERE contact_id = $1
`

func (q *Queries) GetContactById(ctx context.Context, contactID string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactById, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.BusinessName,
		&i.JobTitle,
		&i.LocationGroupID,
		&i.Image,
		&i.Description,
		&i.ContactGroupID,
	)
	return i, err
}

const getContactCount = `-- name: GetContactCount :one
SELECT count(*) FROM contacts
`

func (q *Queries) GetContactCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getContactCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getContactTypeSubGroupById = `-- name: GetContactTypeSubGroupById :one
SELECT contact_group_name, is_active, contact_group_id, contact_type_id FROM contact_group WHERE contact_group_id = $1
`

func (q *Queries) GetContactTypeSubGroupById(ctx context.Context, contactGroupID int) (ContactGroup, error) {
	row := q.db.QueryRowContext(ctx, getContactTypeSubGroupById, contactGroupID)
	var i ContactGroup
	err := row.Scan(
		&i.ContactGroupName,
		&i.IsActive,
		&i.ContactGroupID,
		&i.ContactTypeID,
	)
	return i, err
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts SET  
    first_name = $2, 
    last_name = $3,
    business_name = $4,
    job_title = $5,
    location_group_id = $6,
	image = $7,
    description = $8
  WHERE contact_id = $1 RETURNING contact_id
`

type UpdateContactParams struct {
	ContactID       string  `json:"contact_id"`
	FirstName       string  `json:"first_name"`
	LastName        string  `json:"last_name"`
	BusinessName    string  `json:"business_name"`
	JobTitle        string  `json:"job_title"`
	LocationGroupID *string `json:"location_group_id"`
	Image           *string `json:"image"`
	Description     *string `json:"description"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ContactID,
		arg.FirstName,
		arg.LastName,
		arg.BusinessName,
		arg.JobTitle,
		arg.LocationGroupID,
		arg.Image,
		arg.Description,
	)
	var contact_id string
	err := row.Scan(&contact_id)
	return contact_id, err
}

const updateContactAddress = `-- name: UpdateContactAddress :one
UPDATE contacts_address 
SET  
	website = $3,
	address = $4,
	zip = $5,
	city = $6,
	country = $7,
	mobile = $8 ,
	telephone =$9,
	email = $10
	
	WHERE contacts_address_id = $1 and contact_id = $2 RETURNING contacts_address_id
`

type UpdateContactAddressParams struct {
	ContactsAddressID string  `json:"contacts_address_id"`
	ContactID         string  `json:"contact_id"`
	Website           *string `json:"website"`
	Address           *string `json:"address"`
	Zip               *string `json:"zip"`
	City              *string `json:"city"`
	Country           *string `json:"country"`
	Mobile            *string `json:"mobile"`
	Telephone         *string `json:"telephone"`
	Email             *string `json:"email"`
}

func (q *Queries) UpdateContactAddress(ctx context.Context, arg UpdateContactAddressParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateContactAddress,
		arg.ContactsAddressID,
		arg.ContactID,
		arg.Website,
		arg.Address,
		arg.Zip,
		arg.City,
		arg.Country,
		arg.Mobile,
		arg.Telephone,
		arg.Email,
	)
	var contacts_address_id string
	err := row.Scan(&contacts_address_id)
	return contacts_address_id, err
}

const updateContactType = `-- name: UpdateContactType :one
UPDATE contact_type 
SET  is_active = $2 , is_location_group = $3  WHERE contact_type_id = $1 RETURNING contact_type_id
`

type UpdateContactTypeParams struct {
	ContactTypeID   int  `json:"contact_type_id"`
	IsActive        bool `json:"is_active"`
	IsLocationGroup bool `json:"is_location_group"`
}

func (q *Queries) UpdateContactType(ctx context.Context, arg UpdateContactTypeParams) (int, error) {
	row := q.db.QueryRowContext(ctx, updateContactType, arg.ContactTypeID, arg.IsActive, arg.IsLocationGroup)
	var contact_type_id int
	err := row.Scan(&contact_type_id)
	return contact_type_id, err
}

const updateContactTypeSubGroup = `-- name: UpdateContactTypeSubGroup :one
UPDATE contact_group 
SET  contact_group_name = $2 , contact_type_id = $3,is_active = $4   WHERE contact_group_id = $1 RETURNING contact_group_id
`

type UpdateContactTypeSubGroupParams struct {
	ContactGroupID   int    `json:"contact_group_id"`
	ContactGroupName string `json:"contact_group_name"`
	ContactTypeID    int    `json:"contact_type_id"`
	IsActive         bool   `json:"is_active"`
}

func (q *Queries) UpdateContactTypeSubGroup(ctx context.Context, arg UpdateContactTypeSubGroupParams) (int, error) {
	row := q.db.QueryRowContext(ctx, updateContactTypeSubGroup,
		arg.ContactGroupID,
		arg.ContactGroupName,
		arg.ContactTypeID,
		arg.IsActive,
	)
	var contact_group_id int
	err := row.Scan(&contact_group_id)
	return contact_group_id, err
}
